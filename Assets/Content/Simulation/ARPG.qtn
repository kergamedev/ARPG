// ---INPUTS---
input
{
    FPVector2 Move;
    button Dash;
    button UseWeapon;
}

// ---COMPONENTS---
component PlayerCharacter
{
    player_ref Owner;
    BufferedPlayerAction BufferedAction;
    Int32 ComboProgress;
    Int32 LastComboTick;
    Int32 LastDashTick;
}

component Character
{
    TeamSide Side;

    [ExcludeFromPrototype]
    CharacterState State;

    [ExcludeFromPrototype]
    LocomotionKind OngoingLocomotion;

    [ExcludeFromPrototype]
    bool CanSprint;

    asset_ref<WeaponConfig> Weapon;
}

component DashAction
{
    FPVector3 Destination;
    FP Speed;
}

component AbilityAction
{
    asset_ref<AbilityConfig> Ability;
    Int32 StartTick;
    FPVector3 StartPosition;
    FPQuaternion StartRotation;
    FP Progress;
    bool CanBeInterrupted;

    [AllocateOnComponentAdded, FreeOnComponentRemoved]
    hash_set<EntityHit> AlreadyHitEntities;
}

// ---ASSETS---
asset WeaponConfig;

asset AbilityConfig;

// ---TYPES---
enum CharacterState
{
    None,

    Locomotion,
    Dashing,
    InAbility
}

enum LocomotionKind
{
    NotInLocomotion,

    Idle,
    Walk,
    Run,
    Sprint
}

enum TeamSide
{
    Player,
    Enemy
}

enum TeamCheck
{
    AnyTeam,
    OpposingTeams,
    SameTeam
}

enum PlayerAction
{
    None,
    Dash,
    UseWeapon
}

struct BufferedPlayerAction
{
    PlayerAction Value;
    Int32 StartTick;
}

struct EntityHit
{
    entity_ref Entity;
    Int32 Tick;
}

// ---EVENTS---
synced event PlayerCharacterSpawned
{
    player_ref Player;
    entity_ref Character;
}

event CharacterDashed
{
    entity_ref Character;
    FPVector3 Start;
}

event EntityHit
{
    entity_ref Source;
    entity_ref Victim;
    FP Damage;
}