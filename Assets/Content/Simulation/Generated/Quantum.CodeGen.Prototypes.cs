// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AbilityAction))]
  public unsafe class AbilityActionPrototype : ComponentPrototype<Quantum.AbilityAction> {
    public AssetRef<AbilityConfig> Ability;
    public Int32 StartTick;
    public FPVector3 StartPosition;
    [UnitAttribute(Units.Degrees)]
    public FPVector3 StartRotation;
    public FP Progress;
    public QBoolean CanBeInterrupted;
    [AllocateOnComponentAdded()]
    [FreeOnComponentRemoved()]
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.EntityHitPrototype[] AlreadyHitEntities = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AbilityAction component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AbilityAction result, in PrototypeMaterializationContext context = default) {
        result.Ability = this.Ability;
        result.StartTick = this.StartTick;
        result.StartPosition = this.StartPosition;
        result.StartRotation = FPQuaternion.Euler(this.StartRotation);
        result.Progress = this.Progress;
        result.CanBeInterrupted = this.CanBeInterrupted;
        if (this.AlreadyHitEntities.Length == 0) {
          result.AlreadyHitEntities = default;
        } else {
          var hashSet = frame.AllocateHashSet(out result.AlreadyHitEntities, this.AlreadyHitEntities.Length);
          for (int i = 0; i < this.AlreadyHitEntities.Length; ++i) {
            Quantum.EntityHit tmp = default;
            this.AlreadyHitEntities[i].Materialize(frame, ref tmp, in context);
            hashSet.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.BufferedPlayerAction))]
  public unsafe partial class BufferedPlayerActionPrototype : StructPrototype {
    public Quantum.QEnum32<PlayerAction> Value;
    public Int32 StartTick;
    partial void MaterializeUser(Frame frame, ref Quantum.BufferedPlayerAction result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.BufferedPlayerAction result, in PrototypeMaterializationContext context = default) {
        result.Value = this.Value;
        result.StartTick = this.StartTick;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Character))]
  public unsafe partial class CharacterPrototype : ComponentPrototype<Quantum.Character> {
    public Quantum.QEnum32<TeamSide> Side;
    public AssetRef<WeaponConfig> Weapon;
    partial void MaterializeUser(Frame frame, ref Quantum.Character result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Character component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Character result, in PrototypeMaterializationContext context = default) {
        result.Side = this.Side;
        result.Weapon = this.Weapon;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.DashAction))]
  public unsafe partial class DashActionPrototype : ComponentPrototype<Quantum.DashAction> {
    public FPVector3 Destination;
    public FP Speed;
    partial void MaterializeUser(Frame frame, ref Quantum.DashAction result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.DashAction component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.DashAction result, in PrototypeMaterializationContext context = default) {
        result.Destination = this.Destination;
        result.Speed = this.Speed;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.EntityHit))]
  public unsafe class EntityHitPrototype : StructPrototype {
    public MapEntityId Entity;
    public Int32 Tick;
    public void Materialize(Frame frame, ref Quantum.EntityHit result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
        result.Tick = this.Tick;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public FPVector2 Move;
    public Button Dash;
    public Button UseWeapon;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.Move = this.Move;
        result.Dash = this.Dash;
        result.UseWeapon = this.UseWeapon;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerCharacter))]
  public unsafe partial class PlayerCharacterPrototype : ComponentPrototype<Quantum.PlayerCharacter> {
    public PlayerRef Owner;
    public Quantum.Prototypes.BufferedPlayerActionPrototype BufferedAction;
    public Int32 ComboProgress;
    public Int32 LastComboTick;
    public Int32 LastDashTick;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerCharacter result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerCharacter component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerCharacter result, in PrototypeMaterializationContext context = default) {
        result.Owner = this.Owner;
        this.BufferedAction.Materialize(frame, ref result.BufferedAction, in context);
        result.ComboProgress = this.ComboProgress;
        result.LastComboTick = this.LastComboTick;
        result.LastDashTick = this.LastDashTick;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
